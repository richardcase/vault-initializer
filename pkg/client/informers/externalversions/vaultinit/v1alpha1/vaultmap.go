/*
Copyright 2017 The Vault Initializer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	time "time"

	vaultinit_v1alpha1 "github.com/richardcase/vault-initializer/pkg/apis/vaultinit/v1alpha1"
	versioned "github.com/richardcase/vault-initializer/pkg/client/clientset/versioned"
	internalinterfaces "github.com/richardcase/vault-initializer/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/richardcase/vault-initializer/pkg/client/listers/vaultinit/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// VaultMapInformer provides access to a shared informer and lister for
// VaultMaps.
type VaultMapInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.VaultMapLister
}

type vaultMapInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewVaultMapInformer constructs a new informer for VaultMap type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVaultMapInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVaultMapInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredVaultMapInformer constructs a new informer for VaultMap type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVaultMapInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VaultinitV1alpha1().VaultMaps(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VaultinitV1alpha1().VaultMaps(namespace).Watch(options)
			},
		},
		&vaultinit_v1alpha1.VaultMap{},
		resyncPeriod,
		indexers,
	)
}

func (f *vaultMapInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVaultMapInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *vaultMapInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&vaultinit_v1alpha1.VaultMap{}, f.defaultInformer)
}

func (f *vaultMapInformer) Lister() v1alpha1.VaultMapLister {
	return v1alpha1.NewVaultMapLister(f.Informer().GetIndexer())
}
