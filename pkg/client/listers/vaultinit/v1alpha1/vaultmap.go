/*
Copyright 2017 The Vault Initializer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/richardcase/vault-initializer/pkg/apis/vaultinit/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VaultMapLister helps list VaultMaps.
type VaultMapLister interface {
	// List lists all VaultMaps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.VaultMap, err error)
	// VaultMaps returns an object that can list and get VaultMaps.
	VaultMaps(namespace string) VaultMapNamespaceLister
	VaultMapListerExpansion
}

// vaultMapLister implements the VaultMapLister interface.
type vaultMapLister struct {
	indexer cache.Indexer
}

// NewVaultMapLister returns a new VaultMapLister.
func NewVaultMapLister(indexer cache.Indexer) VaultMapLister {
	return &vaultMapLister{indexer: indexer}
}

// List lists all VaultMaps in the indexer.
func (s *vaultMapLister) List(selector labels.Selector) (ret []*v1alpha1.VaultMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultMap))
	})
	return ret, err
}

// VaultMaps returns an object that can list and get VaultMaps.
func (s *vaultMapLister) VaultMaps(namespace string) VaultMapNamespaceLister {
	return vaultMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VaultMapNamespaceLister helps list and get VaultMaps.
type VaultMapNamespaceLister interface {
	// List lists all VaultMaps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.VaultMap, err error)
	// Get retrieves the VaultMap from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.VaultMap, error)
	VaultMapNamespaceListerExpansion
}

// vaultMapNamespaceLister implements the VaultMapNamespaceLister
// interface.
type vaultMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VaultMaps in the indexer for a given namespace.
func (s vaultMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VaultMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VaultMap))
	})
	return ret, err
}

// Get retrieves the VaultMap from the indexer for a given namespace and name.
func (s vaultMapNamespaceLister) Get(name string) (*v1alpha1.VaultMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vaultmap"), name)
	}
	return obj.(*v1alpha1.VaultMap), nil
}
